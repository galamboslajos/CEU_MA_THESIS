---
title: "Chapter_3_Risk_Model"
author: "Lajos Galambos"
format: html
---


```{r}
# Load the necessary packages
library(quantmod)
library(dplyr)
library(lubridate)

# Set the start date
start_date <- as.Date("1991-01-01")

# Fetch the Yahoo Finance data and store it in a variable with a valid name
msci_world <- getSymbols("^990100-USD-STRD", src = "yahoo", from = start_date, auto.assign = FALSE)

# Convert the xts object to a data frame
msci_world_df <- data.frame(Date = index(msci_world), coredata(Cl(msci_world)))

# Rename the second column to "Close"
names(msci_world_df)[2] <- "Close"

# Calculate the monthly averages
msci_world_monthly <- msci_world_df %>%
  mutate(YearMonth = format(Date, "%Y-%m")) %>%
  group_by(YearMonth) %>%
  summarise(MonthlyAverage = mean(Close, na.rm = TRUE))

# Convert the YearMonth column back to Date in the msci_world_monthly data frame
msci_world_monthly$Date <- as.Date(paste(msci_world_monthly$YearMonth, "01", sep = "-"))
msci_world_monthly <- select(msci_world_monthly, -YearMonth)

# Fetch the FRED data
getSymbols("SPASTT01HUM661N", src = "FRED", from = start_date, auto.assign = TRUE)
getSymbols("SPASTT01USM661N", src = "FRED", from = start_date, auto.assign = TRUE)
getSymbols("CCUSMA02HUM618N", src = "FRED", from = start_date, auto.assign = TRUE)

# Convert the xts objects to monthly frequency
hungary_share_prices <- to.monthly(SPASTT01HUM661N, indexAt = "endof", name = "HungarySharePrices")
us_share_prices <- to.monthly(SPASTT01USM661N, indexAt = "endof", name = "USSharePrices")
hungary_usd <- to.monthly(CCUSMA02HUM618N, indexAt = "endof", name = "HungaryUSD")

# Convert the xts objects to data frames
hungary_share_prices_df <- data.frame(Date = index(hungary_share_prices), HungarySharePrices.Close = coredata(hungary_share_prices))
us_share_prices_df <- data.frame(Date = index(us_share_prices), USSharePrices.Close = coredata(us_share_prices))
hungary_usd_df <- data.frame(Date = index(hungary_usd), HungaryUSD.Close = coredata(hungary_usd))

# Merge the data frames
merged_df <- Reduce(function(x, y) merge(x, y, by = "Date", all = TRUE), 
                    list(msci_world_monthly, hungary_share_prices_df, us_share_prices_df, hungary_usd_df))

# Keep only the desired columns
merged_df <- merged_df %>%
  select(Date, MonthlyAverage, HungarySharePrices.Close.HungarySharePrices.Close, USSharePrices.Close.USSharePrices.Close, HungaryUSD.Close.HungaryUSD.Close)

# Rename the columns
merged_df <- merged_df %>%
  rename(
    Date = Date,
    BUX = HungarySharePrices.Close.HungarySharePrices.Close,
    SPX = USSharePrices.Close.USSharePrices.Close,
    USD_HUF = HungaryUSD.Close.HungaryUSD.Close,
    MSCI_World = MonthlyAverage
  )
```

```{r}
###### Adding Risk free ######
# Fetch the FRED data for US risk-free rate
getSymbols("IR3TIB01USM156N", src = "FRED", from = start_date, auto.assign = TRUE)

# Convert the xts object to monthly frequency
us_risk_free <- to.monthly(IR3TIB01USM156N, indexAt = "endof", name = "USRiskFree")

# Convert the xts object to a data frame
us_risk_free_df <- data.frame(Date = index(us_risk_free), USRiskFree.Close = coredata(us_risk_free))

# Merge the data frame with the existing merged_df
merged_df <- merge(merged_df, us_risk_free_df, by = "Date", all = TRUE)

# Keep only the desired columns
merged_df <- merged_df %>%
  select(Date, BUX, SPX, USD_HUF, MSCI_World, USRiskFree.Close.USRiskFree.Close)

# Rename the columns
merged_df <- merged_df %>%
  rename(US_Risk_free = USRiskFree.Close.USRiskFree.Close)

merged_df$US_Risk_free <- merged_df$US_Risk_free / 100
```

```{r}
getSymbols("IR3TIB01HUM156N", src = "FRED", from = start_date, auto.assign = TRUE)

# Convert the xts object to monthly frequency
hun_risk_free <- to.monthly(IR3TIB01HUM156N, indexAt = "endof", name = "HUNRiskFree")

# Convert the xts object to a data frame
hun_risk_free_df <- data.frame(Date = index(hun_risk_free), HUNRiskFree.Close = coredata(hun_risk_free))

# Merge the data frame with the existing merged_df
merged_df <- merge(merged_df, hun_risk_free_df, by = "Date", all = TRUE)

# Keep only the desired columns
merged_df <- merged_df %>%
  select(Date, BUX, SPX, USD_HUF, MSCI_World, US_Risk_free, HUNRiskFree.Close.HUNRiskFree.Close)

# Rename the columns
merged_df <- merged_df %>%
  rename(HUN_Risk_free = HUNRiskFree.Close.HUNRiskFree.Close)

merged_df$HUN_Risk_free <- merged_df$HUN_Risk_free / 100
```


```{r}
# Calculate the returns using log difference
merged_df <- merged_df %>%
  mutate(
    BUX_Return = log(BUX) - log(lag(BUX)),
    MSCI_World_Return = log(MSCI_World) - log(lag(MSCI_World)),
    SPX_Return = log(SPX) - log(lag(SPX)),
    USD_HUF_Return = log(USD_HUF) - log(lag(USD_HUF))
  )
print(colnames(merged_df))
```


```{r}
library(rugarch)
library(ggplot2)
library(reshape2)
library(zoo)

# Ensure 'Date' is in Date format
merged_df$Date <- as.Date(merged_df$Date)

# Handling missing values: either omit or fill with zeros
# merged_df <- na.omit(merged_df) # Option 1: Omit rows with NA
merged_df[is.na(merged_df)] <- 0  # Option 2: Assign zero to missing values

# Specify GARCH-M model
spec <- ugarchspec(
  variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
  mean.model = list(armaOrder = c(0, 0), include.mean = TRUE, archm = TRUE, archpow = 2),
  distribution.model = "norm"
)

# Fit GARCH-M model for each return series
garch_fit_bux <- ugarchfit(spec, data = merged_df$BUX_Return)
garch_fit_msci <- ugarchfit(spec, data = merged_df$MSCI_World_Return)
garch_fit_usdhuf <- ugarchfit(spec, data = merged_df$USD_HUF_Return)

# Extract conditional standard deviations
sigma_bux <- sigma(garch_fit_bux)
sigma_msci <- sigma(garch_fit_msci)
sigma_usdhuf <- sigma(garch_fit_usdhuf)

# Create a dataframe for plotting
risk_factors <- data.frame(
  Date = merged_df$Date,
  BUX_Risk = sigma_bux,
  MSCI_Risk = sigma_msci,
  USDHUF_Risk = sigma_usdhuf
)

# Calculate the sum of all risk factors
risk_factors$Total_Risk <- rowSums(risk_factors[, c("BUX_Risk", "MSCI_Risk", "USDHUF_Risk")])
```


```{r}
# Melt the dataframe for ggplot2
risk_factors_long <- melt(risk_factors, id.vars = "Date")

# Plot individual risk factors
ggplot(risk_factors_long[risk_factors_long$variable != "Total_Risk", ], aes(x = Date, y = value, color = variable)) +
  geom_line() +
  labs(title = "Individual Risk Factors Over Time",
       x = "Date",
       y = "Conditional Standard Deviation",
       color = "Risk Factor") +
  theme_minimal()

# Plot total risk factor
ggplot(risk_factors, aes(x = Date, y = Total_Risk)) +
  geom_line(color = "red") +
  labs(title = "Total Risk Factor Over Time",
       x = "Date",
       y = "Conditional Standard Deviation") +
  theme_minimal()
```


```{r}
# Plot all risk factors together, including total risk
p2 <- ggplot(risk_factors_long, aes(x = Date, y = value, color = variable)) +
  geom_line(size = 1) +
  labs(x = "Date",
       y = "Conditional Standard Deviation",
       title = "All Risk Factors Over Time",
       color = "Risk Factor") +
  scale_color_manual(values = c("BUX_Risk" = "#1b9e77", "MSCI_Risk" = "#7570b3", "USDHUF_Risk" = "purple", "Total_Risk" = "magenta")) +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, size = 20), 
        legend.title = element_text(size = 14),
        legend.text = element_text(size = 12),
        axis.title.x = element_text(size = 16),
        axis.title.y = element_text(size = 16),
        axis.text.y = element_text(size = 14),
        legend.position = "bottom",
        panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  scale_x_date(limits = range(risk_factors_long$Date), expand = c(0, 0)) +
  scale_y_continuous(limits = c(0, NA))  # Set the y-axis to start from 0

# Display the plot
print(p2)

# Save the plot
ggsave('All_Risk_Factors_Over_Time.png', plot = p2, width=11, height=8, units="in", dpi=300)
```

```{r}
library(rugarch)
library(ggplot2)
library(reshape2)
library(zoo)
library(dplyr)
library(lubridate)
library(knitr)
library(stargazer)

# Ensure 'Date' is in Date format
merged_df$Date <- as.Date(merged_df$Date)

# Handling missing values: either omit or fill with zeros
merged_df[is.na(merged_df)] <- 0  # Assign zero to missing values

# Specify GARCH-M model
spec <- ugarchspec(
  variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
  mean.model = list(armaOrder = c(0, 0), include.mean = TRUE, archm = TRUE, archpow = 2),
  distribution.model = "norm"
)

# Fit GARCH-M model for each return series
garch_fit_bux <- ugarchfit(spec, data = merged_df$BUX_Return)
garch_fit_msci <- ugarchfit(spec, data = merged_df$MSCI_World_Return)
garch_fit_usdhuf <- ugarchfit(spec, data = merged_df$USD_HUF_Return)

# Extract conditional standard deviations
sigma_bux <- sigma(garch_fit_bux)
sigma_msci <- sigma(garch_fit_msci)
sigma_usdhuf <- sigma(garch_fit_usdhuf)

# Create a dataframe for plotting
risk_factors <- data.frame(
  Date = merged_df$Date,
  BUX_Risk = sigma_bux,
  MSCI_Risk = sigma_msci,
  USDHUF_Risk = sigma_usdhuf
)

# Calculate the sum of all risk factors
risk_factors$Total_Risk <- rowSums(risk_factors[, c("BUX_Risk", "MSCI_Risk", "USDHUF_Risk")])

# Calculate Monthly Averages
risk_factors$MonthYear <- floor_date(risk_factors$Date, "month")

monthly_averages <- risk_factors %>%
  group_by(MonthYear) %>%
  summarise(
    Avg_BUX_Risk = mean(BUX_Risk, na.rm = TRUE),
    Avg_MSCI_Risk = mean(MSCI_Risk, na.rm = TRUE),
    Avg_USDHUF_Risk = mean(USDHUF_Risk, na.rm = TRUE),
    Avg_Total_Risk = mean(Total_Risk, na.rm = TRUE)
  )


# Create a list of summary statistics for each variable
summary_stats <- lapply(monthly_averages[, -1], function(x) {
  c(Mean = mean(x, na.rm = TRUE),
    Min = min(x, na.rm = TRUE),
    Max = max(x, na.rm = TRUE),
    Std.Dev = sd(x, na.rm = TRUE))
})

# Convert the list to a data frame
summary_stats_df <- do.call(rbind, summary_stats)

# Create an HTML table with stargazer
stargazer(summary_stats_df, 
          title = "Summary Statistics of Monthly Average Risk Prices", 
          type = "html", 
          out = "Monthly_Risk_summary_stats.html")
```

```{r}
# Calculate global means for each risk factor
global_means <- risk_factors %>%
  summarise(
    Mean_BUX_Risk = mean(BUX_Risk, na.rm = TRUE),
    Mean_MSCI_Risk = mean(MSCI_Risk, na.rm = TRUE),
    Mean_USDHUF_Risk = mean(USDHUF_Risk, na.rm = TRUE),
    Mean_Total_Risk = mean(Total_Risk, na.rm = TRUE)
  )

global_means <- global_means * 100
# Display the summary table
kable(global_means, caption = "Monthly Mean Risk Prices (in %)")

# Create a list of summary statistics for each variable
summary_stats <- lapply(monthly_averages[, -1], function(x) {
  c(Mean = mean(x, na.rm = TRUE),
    Min = min(x, na.rm = TRUE),
    Max = max(x, na.rm = TRUE),
    Std.Dev = sd(x, na.rm = TRUE))
})

# Convert the list to a data frame
summary_stats_df <- do.call(rbind, summary_stats)

# Create an HTML table with stargazer
stargazer(summary_stats_df, 
          title = "Summary Statistics of Monthly Average Risk Prices", 
          type = "html", 
          out = "Monthly_Risk_summary_stats.html")

```


```{r}
# Calculate global means for each risk factor
global_means <- risk_factors %>%
  summarise(
    Mean_BUX_Risk = mean(BUX_Risk, na.rm = TRUE),
    Mean_MSCI_Risk = mean(MSCI_Risk, na.rm = TRUE),
    Mean_USDHUF_Risk = mean(USDHUF_Risk, na.rm = TRUE),
    Mean_Total_Risk = mean(Total_Risk, na.rm = TRUE)
  )

# Annualize the global mean risks
global_means_annualized <- global_means * sqrt(12) * 100

# Display the summary table
kable(global_means_annualized, caption = "Annualized Mean Risk Prices (in %)")

# Create a list of mean for each variable
mean_annualized <- lapply(global_means_annualized, function(x) {
  c(Mean = mean(x, na.rm = TRUE))
})

# Convert the list to a data frame
mean_annualized_df <- do.call(rbind, mean_annualized)

# Create an HTML table with stargazer
stargazer(mean_annualized_df, 
          title = "Mean of Annualized Average Risk Prices", 
          type = "html", 
          out = "Annualized_Risk_mean.html")
```

```{r}
# Load the necessary libraries
library(dplyr)
library(rugarch)

# Assuming merged_df is already prepared and contains the necessary columns

# Step 1: Calculate excess returns and convert Hungarian returns to USD
merged_df <- merged_df %>%
  mutate(
    Excess_BUX_Return = BUX_Return - HUN_Risk_free,
    Excess_MSCI_World_Return = MSCI_World_Return - US_Risk_free,
    BUX_Return_USD = (1 + BUX_Return) * (1 + USD_HUF_Return) - 1,
    Excess_BUX_Return_USD = BUX_Return_USD - US_Risk_free
  )

# Remove NA values
cleaned_df <- na.omit(merged_df)

# Step 2: Define and fit the GARCH-M(1,1) model
spec <- ugarchspec(
  variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
  mean.model = list(armaOrder = c(0, 0), include.mean = TRUE, archm = TRUE, archpow = 2),
  distribution.model = "norm"
)

# Fit the GARCH-M model
garch_fit <- ugarchfit(spec = spec, data = cleaned_df$Excess_BUX_Return_USD)

# Print the summary of the fitted model
summary(garch_fit)

# Extract the parameters
coef(garch_fit)

# Step 3: Calculate the Hungary risk premium from the archm term
archm_term <- coef(garch_fit)["mu"] + coef(garch_fit)["archm"]
print(paste("Estimated Hungary Risk Premium (USD):", round(archm_term, 4)))
```
```{r}
# Extract the parameters from the GARCH-M fit
params <- coef(garch_fit)
mu <- params["mu"]
archm <- params["archm"]
omega <- params["omega"]
alpha1 <- params["alpha1"]
beta1 <- params["beta1"]

# Print extracted parameters
print(paste("mu:", round(mu, 4)))
print(paste("archm:", round(archm, 4)))
print(paste("omega:", round(omega, 4)))
print(paste("alpha1:", round(alpha1, 4)))
print(paste("beta1:", round(beta1, 4)))
```
```{r}
# If archm is negative, it means high volatility reduces returns. The mean return (mu) should be interpreted separately.
print(paste("Mean Return (mu):", round(mu, 4)))
print(paste("Effect of Volatility on Return (archm):", round(archm, 4)))

# Calculate risk premium considering the mean return and volatility effect if needed
# Here, we take mu directly as the Hungary risk premium in USD terms
hungary_risk_premium_usd <- mu
print(paste("Estimated Hungary Risk Premium (USD):", round(hungary_risk_premium_usd, 4)))
```

```{r}
# Summarized output
print(paste("Estimated Hungary Risk Premium (USD):", round(mu, 4)))
```

```{r}
# Monthly Hungary risk premium
monthly_risk_premium <- mu

# Annualize the risk premium
annualized_risk_premium <- (1 + monthly_risk_premium) ^ 12 - 1

# Print the annualized risk premium
print(paste("Annualized Hungary Risk Premium (USD):", round(annualized_risk_premium, 4)))
```

```{r}
# Load necessary libraries
library(ggplot2)
library(rugarch)
library(xts)

# Assuming cleaned_df contains the necessary data

# Step 1: Fit the GARCH-M(1,1) model again to extract volatility
spec <- ugarchspec(
  variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
  mean.model = list(armaOrder = c(0, 0), include.mean = TRUE, archm = TRUE, archpow = 2),
  distribution.model = "norm"
)
garch_fit <- ugarchfit(spec = spec, data = cleaned_df$Excess_BUX_Return_USD)

# Extract the fitted values and conditional volatility
fitted_values <- fitted(garch_fit)
sigma_values <- sigma(garch_fit)

# Create a data frame with fitted values and sigma
plot_data <- data.frame(
  Date = index(cleaned_df),
  Excess_BUX_Return_USD = cleaned_df$Excess_BUX_Return_USD,
  Fitted_Values = fitted_values,
  Sigma = sigma_values
)

# Plot the monthly excess returns of the Hungarian market
ggplot(cleaned_df, aes(x = Date)) +
  geom_line(aes(y = Excess_BUX_Return_USD, color = "Excess BUX Return (USD)")) +
  geom_line(aes(y = Excess_MSCI_World_Return, color = "Excess MSCI World Return")) +
  labs(title = "Monthly Excess Returns",
       x = "Date",
       y = "Return",
       color = "Series") +
  theme_minimal()

# Plot the conditional volatility (sigma)
ggplot(plot_data, aes(x = Date)) +
  geom_line(aes(y = Sigma, color = "Conditional Volatility (Sigma)")) +
  labs(title = "Conditional Volatility Over Time",
       x = "Date",
       y = "Volatility",
       color = "Series") +
  theme_minimal()

# Plot the fitted values (risk premium decomposition)
ggplot(plot_data, aes(x = Date)) +
  geom_line(aes(y = Fitted_Values, color = "Fitted Excess Return (USD)")) +
  geom_line(aes(y = Excess_BUX_Return_USD, color = "Actual Excess Return (USD)"), alpha = 0.5) +
  labs(title = "Fitted vs Actual Excess Return",
       x = "Date",
       y = "Return",
       color = "Series") +
  theme_minimal()
```

```{r}
# Load necessary libraries
library(dplyr)
library(quantmod)
library(rugarch)
library(ggplot2)

# Assuming merged_df is already prepared and contains the necessary columns
# Columns: Date, BUX, SPX, USD_HUF, US_Risk_free, HUN_Risk_free

# Calculate returns and excess returns
merged_df <- merged_df %>%
  mutate(Excess_SPX_Return = SPX_Return - US_Risk_free,
    Excess_BUX_Return_HUF = BUX_Return - HUN_Risk_free,
    BUX_Return_USD = (1 + BUX_Return) * (1 + USD_HUF_Return) - 1,
    Excess_BUX_Return_USD = BUX_Return_USD - US_Risk_free
  )

# Remove NA values
cleaned_df <- na.omit(merged_df)

# Step 1: Define and fit the GARCH-M(1,1) model for Hungarian market premium in USD
spec <- ugarchspec(
  variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
  mean.model = list(armaOrder = c(0, 0), include.mean = TRUE, archm = TRUE, archpow = 2),
  distribution.model = "norm"
)
garch_fit <- ugarchfit(spec = spec, data = cleaned_df$Excess_BUX_Return_USD)

# Print the summary of the fitted model
summary(garch_fit)

# Extract the parameters from the GARCH-M fit
params <- coef(garch_fit)
mu <- params["mu"]
archm <- params["archm"]
omega <- params["omega"]
alpha1 <- params["alpha1"]
beta1 <- params["beta1"]

# Print extracted parameters
print(paste("mu:", round(mu, 4)))
print(paste("archm:", round(archm, 4)))
print(paste("omega:", round(omega, 4)))
print(paste("alpha1:", round(alpha1, 4)))
print(paste("beta1:", round(beta1, 4)))

# Calculate the Hungary risk premium from the mu term
hungary_risk_premium_usd <- mu
print(paste("Estimated Monthly Hungary Risk Premium (USD):", round(hungary_risk_premium_usd, 4)))

# Annualize the risk premium
annualized_risk_premium <- (1 + hungary_risk_premium_usd) ^ 12 - 1
print(paste("Annualized Hungary Risk Premium (USD):", round(annualized_risk_premium, 4)))

# Visualization
# Extract the fitted values and conditional volatility
fitted_values <- fitted(garch_fit)
sigma_values <- sigma(garch_fit)

# Create a data frame with fitted values and sigma
plot_data <- data.frame(
  Date = index(cleaned_df),
  Excess_BUX_Return_USD = cleaned_df$Excess_BUX_Return_USD,
  Fitted_Values = fitted_values,
  Sigma = sigma_values
)

# Plot the monthly excess returns of the Hungarian market
ggplot(cleaned_df, aes(x = Date)) +
  geom_line(aes(y = Excess_BUX_Return_USD, color = "Excess BUX Return (USD)")) +
  geom_line(aes(y = Excess_SPX_Return, color = "Excess SPX Return")) +
  labs(title = "Monthly Excess Returns",
       x = "Date",
       y = "Return",
       color = "Series") +
  theme_minimal()

# Plot the conditional volatility (sigma)
ggplot(plot_data, aes(x = Date)) +
  geom_line(aes(y = Sigma, color = "Conditional Volatility (Sigma)")) +
  labs(title = "Conditional Volatility Over Time",
       x = "Date",
       y = "Volatility",
       color = "Series") +
  theme_minimal()

# Plot the fitted values (risk premium decomposition)
ggplot(plot_data, aes(x = Date)) +
  geom_line(aes(y = Fitted_Values, color = "Fitted Excess Return (USD)")) +
  geom_line(aes(y = Excess_BUX_Return_USD, color = "Actual Excess Return (USD)"), alpha = 0.5) +
  labs(title = "Fitted vs Actual Excess Return",
       x = "Date",
       y = "Return",
       color = "Series") +
  theme_minimal()

```

```{r}
# Load the necessary packages
library(ggplot2)

# Plot the monthly excess returns of the Hungarian market
p1 <- ggplot(cleaned_df, aes(x = Date)) +
  geom_line(aes(y = Excess_BUX_Return_USD, color = "Excess BUX Return (USD)"), size = 1) +
  geom_line(aes(y = Excess_SPX_Return, color = "Excess SPX Return"), size = 1) +
  labs(title = "Monthly Excess Returns",
       x = "Date",
       y = "Return",
       color = "Series") +
  scale_color_manual(values = c("Excess BUX Return (USD)" = "#1b9e77", "Excess SPX Return" = "#7570b3")) +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, size = 20), 
        legend.title = element_text(size = 14),
        legend.text = element_text(size = 12),
        axis.title.x = element_text(size = 16),
        axis.title.y = element_text(size = 16),
        axis.text.y = element_text(size = 14),
        legend.position = "bottom",
        panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  scale_x_date(limits = range(cleaned_df$Date), expand = c(0, 0)) +
  scale_y_continuous(limits = c(0, NA))  # Set the y-axis to start from 0

# Display the plot
print(p1)

# Save the plot
ggsave('Monthly_Excess_Returns.png', plot = p1, width=11, height=8, units="in", dpi=300)

# Plot the conditional volatility (sigma)
p2 <- ggplot(plot_data, aes(x = Date)) +
  geom_line(aes(y = Sigma, color = "Conditional Volatility (Sigma)"), size = 1) +
  labs(title = "Conditional Volatility Over Time",
       x = "Date",
       y = "Volatility",
       color = "Series") +
  scale_color_manual(values = c("Conditional Volatility (Sigma)" = "#1b9e77")) +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, size = 20), 
        legend.title = element_text(size = 14),
        legend.text = element_text(size = 12),
        axis.title.x = element_text(size = 16),
        axis.title.y = element_text(size = 16),
        axis.text.y = element_text(size = 14),
        legend.position = "bottom",
        panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  scale_x_date(limits = range(plot_data$Date), expand = c(0, 0)) +
  scale_y_continuous(limits = c(0, NA))  # Set the y-axis to start from 0

# Display the plot
print(p2)

# Save the plot
ggsave('Conditional_Volatility.png', plot = p2, width=11, height=8, units="in", dpi=300)

# Plot the fitted values (risk premium decomposition)
p3 <- ggplot(plot_data, aes(x = Date)) +
  geom_line(aes(y = Fitted_Values, color = "Fitted Excess Return (USD)"), size = 1) +
  geom_line(aes(y = Excess_BUX_Return_USD, color = "Actual Excess Return (USD)"), alpha = 0.5, size = 1) +
  labs(title = "Fitted vs Actual Excess Return",
       x = "Date",
       y = "Return",
       color = "Series") +
  scale_color_manual(values = c("Fitted Excess Return (USD)" = "#1b9e77", "Actual Excess Return (USD)" = "#7570b3")) +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, size = 20), 
        legend.title = element_text(size = 14),
        legend.text = element_text(size = 12),
        axis.title.x = element_text(size = 16),
        axis.title.y = element_text(size = 16),
        axis.text.y = element_text(size = 14),
        legend.position = "bottom",
        panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  scale_x_date(limits = range(plot_data$Date), expand = c(0, 0)) +
  scale_y_continuous(limits = c(0, NA))  # Set the y-axis to start from 0

# Display the plot
print(p3)

# Save the plot
ggsave('Fitted_vs_Actual_Excess_Return.png', plot = p3, width=11, height=8, units="in", dpi=300)
```

