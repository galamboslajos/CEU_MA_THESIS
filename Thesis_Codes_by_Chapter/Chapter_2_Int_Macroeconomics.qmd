---
title: "Chapter 2. International Macroeconomic Analysis"
author: "Lajos Galambos"
format: html
---
```{r}
#| echo: false
#| message: false
#| warning: false
###### PPP rate vs Nominal Exchange Rate ######
# Load the necessary libraries
library(WDI)
library(tidyverse)

# Fetch the data from the World Bank
nominal_rate <- WDI(country="HU", indicator="PA.NUS.FCRF", start=1991, end=2022)
ppp_rate <- WDI(country="HU", indicator="PA.NUS.PPP", start=1991, end=2022)


# Convert the data to data frames and merge them
nominal_rate_df <- data.frame(Year = nominal_rate$year, Nominal_Rate = nominal_rate$PA.NUS.FCRF)
ppp_rate_df <- data.frame(Year = ppp_rate$year, PPP_Rate = ppp_rate$PA.NUS.PPP)
data <- merge(nominal_rate_df, ppp_rate_df, by = "Year")

# Calculate the percent deviation
data$Percent_Deviation <- (data$Nominal_Rate - data$PPP_Rate) / data$PPP_Rate * 100
data$Percent_Deviation <- data$Percent_Deviation * -1

# Create a line plot of the percent deviation over time
p1 <- ggplot(data, aes(x = Year)) +
  geom_line(aes(y = Percent_Deviation, color = "Percent Deviation"), size = 1.5) +
  geom_point(aes(y = Percent_Deviation, color = "Percent Deviation"), shape = 18, size = 4) +
  labs(x = "Year", 
       y = "Percent Deviation from PPP", 
       title = "Deviation of Nominal Exchange Rate from PPP for Hungary",
       color = "Indicator") +
  scale_color_manual(values = c("Percent Deviation" = "#1b9e77")) +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, size = 20), 
        legend.title = element_text(size = 14),
        legend.text = element_text(size = 12),
        axis.title.x = element_text(size = 16),
        axis.title.y = element_text(size = 16),
        axis.text.y = element_text(size = 14),
        legend.position = "bottom",
        panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  scale_x_continuous(limits = c(1991, NA), expand = c(0, 0)) 

# Display the plot
print(p1)

# Save the plot
ggsave('Deviation_from_PPP.png', plot = p1, width=11, height=6, units="in", dpi=300)
```


```{r}
#| echo: false
#| message: false
#| warning: false
###### Reading data for NEER and REER ######
library(tidyverse)

# Read the CSV file
data <- read.csv("BIS_Exchange_Rates.csv", header = FALSE)

# Transpose the data
data_transposed <- as.data.frame(t(data))

# Select only the 3rd, 4th, and 5th columns
data_transposed <- data_transposed[, 3:5]

# Remove the first 9 rows
data_transposed <- data_transposed[-c(1:9), ]

# Set the column names
colnames(data_transposed) <- c("Date", "NEER", "REER")
```



```{r}
#| echo: false
#| message: false
#| warning: false
###### NEER vs REER ######
# Load the necessary package
library(tidyverse)

# Convert the Date column to Date type
data_transposed$Date <- as.Date(data_transposed$Date)

# Convert NEER and REER to numeric
data_transposed$NEER <- as.numeric(data_transposed$NEER)
data_transposed$REER <- as.numeric(data_transposed$REER)

# Create a line plot of NEER and REER over time
p1 <- ggplot(data_transposed, aes(x = Date)) +
  geom_line(aes(y = NEER, color = "NEER"), size = 0.8) +
  geom_line(aes(y = REER, color = "REER"), size = 0.8) +
  labs(x = "Date", 
       y = "Exchange Rate Index, 2020=100", 
       title = "NEER and REER over Time",
       color = "Indicator") +
  scale_color_manual(values = c("NEER" = "#1b9e77", "REER" = "purple")) +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, size = 20), 
        legend.title = element_text(size = 14),
        legend.text = element_text(size = 12),
        axis.title.x = element_text(size = 16),
        axis.title.y = element_text(size = 16),
        axis.text.y = element_text(size = 14),
        legend.position = "bottom",
        panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  scale_x_date(limits = range(data_transposed$Date), expand = c(0, 0)) +
  scale_y_continuous(limits = c(50, NA))  # Set the y-axis to start from 50

# Display the plot
print(p1)

# Save the plot
ggsave('NEER_and_REER_over_Time.png', plot = p1, width=11, height=8, units="in", dpi=300)
```
```{r}
#| echo: false
#| message: false
#| warning: false
###### CPI and ULC based REERS for Hungary ######
library(quantmod)
library(tidyverse)
# Fetch the data from FRED
CCRETT01HUM661N <- getSymbols("CCRETT01HUM661N", src = "FRED", auto.assign = FALSE)
CCRETT02HUQ661N <- getSymbols("CCRETT02HUQ661N", src = "FRED", auto.assign = FALSE)

# Convert the xts objects to data frames
CCRETT01HUM661N_df <- data.frame(Date = index(CCRETT01HUM661N), coredata(CCRETT01HUM661N))
CCRETT02HUQ661N_df <- data.frame(Date = index(CCRETT02HUQ661N), coredata(CCRETT02HUQ661N))

# Merge the data frames
data <- merge(CCRETT01HUM661N_df, CCRETT02HUQ661N_df, by = "Date")

# Rename the columns
colnames(data) <- c("Date", "CPI_based_REER", "Unit_Labor_Cost_based_REER")

# Create a line plot of CPI_based_REER and Unit_Labor_Cost_based_REER over time
p1 <- ggplot(data, aes(x = Date)) +
  geom_line(aes(y = CPI_based_REER, color = "CPI based REER"), size = 1) +
  geom_line(aes(y = Unit_Labor_Cost_based_REER, color = "Unit Labor Cost based REER"), size = 1) +
  labs(x = "Date", 
       y = "Exchange Rate Index, 2015=100", 
       title = "CPI and ULC based REER over time for Hungary",
       color = "Indicator") +
  scale_color_manual(values = c("CPI based REER" = "#1b9e77", "Unit Labor Cost based REER" = "purple")) +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, size = 20), 
        legend.title = element_text(size = 14),
        legend.text = element_text(size = 12),
        axis.title.x = element_text(size = 16),
        axis.title.y = element_text(size = 16),
        axis.text.y = element_text(size = 14),
        legend.position = "bottom",
        panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  scale_x_date(limits = range(data$Date), expand = c(0, 0)) +
  scale_y_continuous(limits = c(70, NA))  # Set the y-axis to start from 70

# Display the plot
print(p1)

# Save the plot
ggsave('CPI_and_Unit_Labor_Cost_based_REER_over_Time.png', plot = p1, width=11, height=6, units="in", dpi=300)
```



```{r}
#| echo: false
#| message: false
#| warning: false
#| output: false
###### Equilibrium Real Effective Exchange Rate and cointegration test ######
library(quantmod)
library(WDI)
library(urca)
library(zoo)
library(tidyverse)

# Fetch the data
REER <- WDI(country = "HU", indicator = "PX.REX.REER", start = 1991, end = 2019)
nfa <- WDI(country = "HU", indicator = "BN.CAB.XOKA.CD", start = 1991, end = 2019)
gdp <- WDI(country = "HU", indicator = "NY.GDP.MKTP.CD", start = 1991, end = 2019)
prod <- getSymbols("CTFPPPHUA669NRUG", src = "FRED", auto.assign = FALSE)

# Subset the FRED data to match the date range of 1982 to 2022
prod <- window(prod, start = as.Date("1991-01-01"), end = as.Date("2019-12-31"))

# Convert the xts object to a data frame
prod <- data.frame(year = index(prod), prod = coredata(prod))

# Convert the 'year' column to date format
REER$year = as.Date(paste(REER$year, 1, 1, sep = "-"), format = "%Y-%m-%d")
nfa$year = as.Date(paste(nfa$year, 1, 1, sep = "-"), format = "%Y-%m-%d")
gdp$year = as.Date(paste(gdp$year, 1, 1, sep = "-"), format = "%Y-%m-%d")
prod$year = as.Date(paste(prod$year, 1, 1, sep = "-"), format = "%Y-%m-%d")

# Merge the data into one data frame
data <- merge(REER[, c("year", "PX.REX.REER")], nfa[, c("year", "BN.CAB.XOKA.CD")], by = "year")
data <- merge(data, gdp[, c("year", "NY.GDP.MKTP.CD")], by = "year")
data <- merge(data, prod, by = "year")

# Rename the columns
names(data) <- c('year', 'REER', 'nfa', 'gdp', 'prod')

# Normalize nfa by dividing it by the nominal GDP
data$nfa <- data$nfa / data$gdp
data$nfa <- cumsum(data$nfa)

# Create new columns for the logs of each variable
data$log_REER <- log(data$REER)
data$log_prod <- log(data$prod)



# Perform the cointegration test
test <- ca.jo(data[, c("log_REER", "nfa", "log_prod")], type = "trace", ecdet = "trend", K = 2)
summary(test)
```

```{r}
#| echo: false
#| message: false
#| warning: false
###### Cointegration test results into summary table ######

library(stargazer)
test <- ca.jo(data[, c("log_REER", "nfa", "log_prod")], type = "trace", ecdet = "trend", K = 2)

# Extract the relevant information
eigenvalues <- test@lambda
test_statistics <- test@teststat
critical_values <- test@cval

# Create data frames
eigenvalues_df <- data.frame(Eigenvalues = eigenvalues)
test_results_df <- data.frame(
  Test_Statistics = test_statistics,
  Critical_Values_10pct = critical_values[, "10pct"],
  Critical_Values_5pct = critical_values[, "5pct"],
  Critical_Values_1pct = critical_values[, "1pct"]
)

# Create tables with stargazer
eigenvalues_table <- stargazer(eigenvalues_df, title="Eigenvalues", type="html", digits=2, out="eigenvalues_EREER.html")
test_results_table <- stargazer(test_results_df, title="Test Statistics and Critical Values", type="html", digits=2, out="test_results_EREER.html")
```



```{r}
#| echo: false
#| message: false
#| warning: false
###### Plotting the REER and EREER ######
test <- ca.jo(data[, c("log_REER", "nfa", "log_prod")], type = "trace", ecdet = "trend", K = 2)

# Extract the cointegrating vector
cointegrating_vector <- test@V[, 1]

# Calculate the equilibrium REER
equilibrium_REER <- cointegrating_vector[1] * data$log_REER + cointegrating_vector[2] * data$nfa + cointegrating_vector[3] * data$log_prod


# Create a data frame for plotting
plot_data <- data.frame(Date = data$year, Actual_REER = data$log_REER, Equilibrium_REER = equilibrium_REER)

# Create the plot
p1 <- ggplot(plot_data, aes(x = Date)) +
  geom_line(aes(y = Actual_REER, color = "Actual REER"), size = 0.8) +
  geom_line(aes(y = Equilibrium_REER, color = "Equilibrium REER"), size = 0.8) +
  labs(x = "Date", 
       y = "REER (in logs)", 
       title = "Actual and Equilibrium REER (in logs)",
       color = "Indicator") +
  scale_color_manual(values = c("Actual REER" = "#1b9e77", "Equilibrium REER" = "purple")) +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, size = 20), 
        legend.title = element_text(size = 14),
        legend.text = element_text(size = 12),
        axis.title.x = element_text(size = 16),
        axis.title.y = element_text(size = 16),
        axis.text.y = element_text(size = 14),
        legend.position = "bottom",
        panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  scale_x_date(limits = range(plot_data$Date), expand = c(0, 0))

# Display the plot
print(p1)

ggsave('Actual_vs_Equilibrium_REER.png', plot = p1, width=11, height=6, units="in", dpi=300)
```



```{r}
#| echo: false
#| message: false
#| warning: false
###### Deviations of the REER from EREER ######
# Calculate the deviations from the equilibrium REER in percentage terms
deviations <- (data$log_REER - equilibrium_REER) / equilibrium_REER * 100

# Calculate the standard error of the deviations
se <- sd(deviations)

# Calculate the 90% confidence interval bands
ci_upper <- deviations + qt(0.90, df=length(deviations)-1) * se
ci_lower <- deviations - qt(0.90, df=length(deviations)-1) * se

# Create a data frame for plotting
plot_data <- data.frame(Date = data$year, Deviations = deviations, CI_Upper = ci_upper, CI_Lower = ci_lower)

# Create the plot
p1 <- ggplot(plot_data, aes(x = Date)) +
  geom_line(aes(y = Deviations), color = "#1b9e77", size = 1) +
  geom_ribbon(aes(ymin = CI_Lower, ymax = CI_Upper), fill = "purple", alpha = 0.2) +
  labs(x = "Date", 
       y = "Deviations (%)", 
       title = "Deviations from Equilibrium REER over Time",
       color = "Indicator") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, size = 20), 
        legend.title = element_text(size = 14),
        legend.text = element_text(size = 12),
        axis.title.x = element_text(size = 16),
        axis.title.y = element_text(size = 16),
        axis.text.y = element_text(size = 14),
        legend.position = "bottom",
        panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  scale_x_date(limits = range(plot_data$Date), expand = c(0, 0))

# Display the plot
print(p1)

# Save the plot
ggsave('Deviations_from_Equilibrium_REER.png', plot = p1, width=11, height=4, units="in", dpi=300)
```



```{r}
#| echo: false
#| message: false
#| warning: false
###### Mean of deviations ######
library(stargazer)

# Create an HTML summary table using stargazer
stargazer(plot_data, type = "html", out = "Mean_summary_table.html", title="Summary Statistics for Deviation", digits=2, summary.stat = c("mean", "min", "max"))
```


```{r}
#| echo: false
#| message: false
#| warning: false
###### Interest Rates and the Nominal Exchange Rate ######
# Load the required packages
library(quantmod)
library(tidyquant)
library(dplyr)

# Get the interest rate data for Hungary
getSymbols("IRSTCB01HUM156N", src = "FRED", from = "1985-01-01", to = Sys.Date())
interest_rate_HUN_data <- data.frame(Date=as.Date(index(IRSTCB01HUM156N)), coredata(IRSTCB01HUM156N))
names(interest_rate_HUN_data) <- c("Date", "Interest_Rate_HUN")

# Get the interest rate data for the US
getSymbols("IRSTFR01USM156N", src = "FRED", from = "1985-01-01", to = Sys.Date())
interest_rate_USD_data <- data.frame(Date=as.Date(index(IRSTFR01USM156N)), coredata(IRSTFR01USM156N))
names(interest_rate_USD_data) <- c("Date", "Interest_Rate_USD")

# Get the exchange rate data
exchange_rate_data <- tq_get("CCUSMA02HUM618N", get = "economic.data", from = "1985-01-01", to = Sys.Date())
names(exchange_rate_data) <- c("ID", "Date", "Exchange_Rate")
exchange_rate_data <- select(exchange_rate_data, "Date", "Exchange_Rate")

# Merge the data frames by 'Date'
data <- merge(interest_rate_HUN_data, interest_rate_USD_data, by = "Date", all = TRUE)
data <- merge(data, exchange_rate_data, by = "Date", all = TRUE)


# Create a plot for the nominal exchange rate
p1 = ggplot(data, aes(x = Date)) +
  geom_line(aes(y = Exchange_Rate, color = "Nominal Exchange Rate"), size = 1.2) +
  scale_color_manual(values = c("Nominal Exchange Rate" = "purple")) +
  labs(x = "Date", 
       y = "Nominal USD/HUF", 
       title = "Monthly Nominal Exchange Rate and Interest Rates for Hungary and the USA",
       color = "Indicator") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, size = 20), 
        legend.title = element_text(size = 14),
        legend.text = element_text(size = 12),
        axis.title.x = element_text(size = 16),
        axis.title.y = element_text(size = 16),
        axis.text.y = element_text(size = 14),
        legend.position = "bottom",
        panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  scale_x_date(limits = range(data$Date), expand = c(0, 0))

# Create a plot for the interest rates
p2 = ggplot(data, aes(x = Date)) +
  geom_line(aes(y = Interest_Rate_HUN, color = "Interest Rate HUN"), size = 1.2) +
  geom_line(aes(y = Interest_Rate_USD, color = "Interest Rate US"), size = 1.2) +
  scale_color_manual(values = c("Interest Rate HUN" = "#1b9e77", "Interest Rate US" = "#7570b3")) +
  labs(x = "Date", 
       y = "Interest Rates (in %)", 
       title = "Short Term Interest Rates in Hungary and in the USA",
       color = "Indicator") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, size = 20), 
        legend.title = element_text(size = 14),
        legend.text = element_text(size = 12),
        axis.title.x = element_text(size = 16),
        axis.title.y = element_text(size = 16),
        axis.text.y = element_text(size = 14),
        legend.position = "bottom",
        panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  scale_x_date(limits = range(data$Date), expand = c(0, 0))

# Arrange the plots vertically
p_intrandexch = grid.arrange(p1, p2, ncol = 1)
ggsave('Interest Rates and Nominal Rate.png', plot = p_intrandexch, width=11, height=8, units="in", dpi=300)
```



```{r}
#| echo: false
#| message: false
#| warning: false
###### OLS model for UCIP ######
library(stargazer)
library(tseries)
# Calculate the log of the exchange rate
data$log_Exchange_Rate <- log(data$Exchange_Rate)

# Calculate the log interest rate differential
data$Log_Interest_Rate_Differential <- log(1 + data$Interest_Rate_HUN / 100) - log(1 + data$Interest_Rate_USD / 100)

# Calculate the change in the log of the exchange rate with a one-period lead
data$Change_log_Exchange_Rate <- c(diff(data$log_Exchange_Rate), NA)

# Calculate the interest rate differential
data$Interest_Rate_Differential <- data$Interest_Rate_HUN - data$Interest_Rate_USD

# Remove the last row because it has NA for Change_log_Exchange_Rate
data <- data[-nrow(data), ]

# Fit a linear regression model
model <- lm(Change_log_Exchange_Rate ~ Log_Interest_Rate_Differential, data = data)




# Create the scatter plot
p1 <- ggplot(data, aes(x = Log_Interest_Rate_Differential, y = Change_log_Exchange_Rate)) +
  geom_point(color = "purple", alpha = 0.5, size = 2.5) +
  geom_abline(intercept = coef(model)[1], slope = coef(model)[2], color = "black", size = 1) +  
  labs(x = "Log Interest Rate Differential", 
       y = "Change in Log Exchange Rate", 
       title = "Scatter Plot for UCIP: Exchange Rate on Interest Rate Differentials") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, size = 20), 
        axis.title.x = element_text(size = 16),
        axis.title.y = element_text(size = 16),
        axis.text.x = element_text(size = 14),  
        axis.text.y = element_text(size = 14),
        panel.border = element_blank(),  
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),  
        axis.line = element_line(color = "grey")) + 
  geom_vline(xintercept = 0, color = "grey") + 
  geom_hline(yintercept = 0, color = "grey") + 
  coord_cartesian(xlim = c(-max_abs_value, max_abs_value), 
                  ylim = c(-max_abs_value, max_abs_value)) 

# Print the plot
print(p1)

# Create a summary table for the model
stargazer(model, title="OLS model for UCIP", align=TRUE, out = "OLS_UCIP_summary_table.html")

# Save the plot
ggsave('UCIP_Scatter_Plot.png', plot = p1, width=11, height=4, units="in", dpi=300)

# Perform the ADF test on the residuals of the model
adf_test <- adf.test(residuals(model))

# Create a data frame with the results
adf_results <- data.frame(
  Test = "Augmented Dickey-Fuller Test",
  Statistic = adf_test$statistic,
  `Lag Order` = adf_test$parameter,
  `p-value` = adf_test$p.value,
  `Alternative Hypothesis` = adf_test$alternative
)

# Generate the HTML table with stargazer
stargazer(adf_results, title="ADF Test for UCIP", type="html", out = "UCIP_ADF_test.html", summary = FALSE)
```


```{r}
#| echo: false
#| message: false
#| warning: false
###### Nominal Exchange Rate and Inflation differences ######
library(quantmod)
library(tidyquant)
library(dplyr)

# Get the inflation rate data for Hungary
getSymbols("CPALTT01HUM659N", src = "FRED", from = "1985-01-01", to = Sys.Date())
inflation_rate_HUN_data <- data.frame(Date=as.Date(index(CPALTT01HUM659N)), coredata(CPALTT01HUM659N))
names(inflation_rate_HUN_data) <- c("Date", "Inflation_Rate_HUN")

# Get the inflation rate data for the US
getSymbols("CPALTT01USM659N", src = "FRED", from = "1985-01-01", to = Sys.Date())
inflation_rate_USD_data <- data.frame(Date=as.Date(index(CPALTT01USM659N)), coredata(CPALTT01USM659N))
names(inflation_rate_USD_data) <- c("Date", "Inflation_Rate_USD")

# Get the exchange rate data
exchange_rate_data <- tq_get("CCUSMA02HUM618N", get = "economic.data", from = "1985-01-01", to = Sys.Date())
names(exchange_rate_data) <- c("ID", "Date", "Exchange_Rate")
exchange_rate_data <- select(exchange_rate_data, "Date", "Exchange_Rate")

# Merge the data frames by 'Date'
data <- merge(inflation_rate_HUN_data, inflation_rate_USD_data, by = "Date", all = TRUE)
data <- merge(data, exchange_rate_data, by = "Date", all = TRUE)

# Create a plot for the nominal exchange rate
p1 = ggplot(data, aes(x = Date)) +
  geom_line(aes(y = Exchange_Rate, color = "Nominal Exchange Rate"), size = 1.2) +
  scale_color_manual(values = c("Nominal Exchange Rate" = "purple")) +
  labs(x = "Date", 
       y = "Nominal USD/HUF", 
       title = "Monthly Nominal Exchange Rate and Inflation Rates for Hungary and the USA",
       color = "Indicator") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, size = 20), 
        legend.title = element_text(size = 14),
        legend.text = element_text(size = 12),
        axis.title.x = element_text(size = 16),
        axis.title.y = element_text(size = 16),
        axis.text.y = element_text(size = 14),
        legend.position = "bottom",
        panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  scale_x_date(limits = range(data$Date), expand = c(0, 0))

# Create a plot for the inflation rates
p2 = ggplot(data, aes(x = Date)) +
  geom_line(aes(y = Inflation_Rate_HUN, color = "Inflation Rate HUN"), size = 1.2) +
  geom_line(aes(y = Inflation_Rate_USD, color = "Inflation Rate US"), size = 1.2) +
  scale_color_manual(values = c("Inflation Rate HUN" = "#1b9e77", "Inflation Rate US" = "#7570b3")) +
  labs(x = "Date", 
       y = "Inflation Rates (in %)", 
       title = "Inflation Rates in Hungary and in the USA",
       color = "Indicator") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, size = 20), 
        legend.title = element_text(size = 14),
        legend.text = element_text(size = 12),
        axis.title.x = element_text(size = 16),
        axis.title.y = element_text(size = 16),
        axis.text.y = element_text(size = 14),
        legend.position = "bottom",
        panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  scale_x_date(limits = range(data$Date), expand = c(0, 0))

# Arrange the plots vertically
p_inflationexch = grid.arrange(p1, p2, ncol = 1)
ggsave('Inflation Rates and Nominal Rate.png', plot = p_inflationexch, width=11, height=8, units="in", dpi=300)
```


```{r}
#| echo: false
#| message: false
#| warning: false
###### OLS model for IFE ######
library(stargazer)

# Calculate the log of the exchange rate
data$log_Exchange_Rate <- log(data$Exchange_Rate)

# Calculate the log inflation rate differential
data$Log_Inflation_Rate_Differential <- log(1 + data$Inflation_Rate_HUN / 100) - log(1 + data$Inflation_Rate_USD / 100)

# Calculate the change in the log of the exchange rate with a one-period lead
data$Change_log_Exchange_Rate <- c(diff(data$log_Exchange_Rate), NA)

# Calculate the inflation rate differential
data$Inflation_Rate_Differential <- data$Inflation_Rate_HUN - data$Inflation_Rate_USD

# Remove the last row because it has NA for Change_log_Exchange_Rate
data <- data[-nrow(data), ]

# Fit a linear regression model
model <- lm(Change_log_Exchange_Rate ~ Log_Inflation_Rate_Differential, data = data)

# Create the scatter plot
p1 <- ggplot(data, aes(x = Log_Inflation_Rate_Differential, y = Change_log_Exchange_Rate)) +
  geom_point(color = "purple", alpha = 0.5, size = 2.5) +
  geom_abline(intercept = coef(model)[1], slope = coef(model)[2], color = "black", size = 1) +  
  labs(x = "Log Inflation Rate Differential", 
       y = "Change in Log Exchange Rate", 
       title = "Scatter Plot for UCIP: Exchange Rate on Inflation Rate Differentials") +
  theme_bw() +
  theme(plot.title = element_text(hjust = 0.5, size = 20), 
        axis.title.x = element_text(size = 16),
        axis.title.y = element_text(size = 16),
        axis.text.x = element_text(size = 14),  
        axis.text.y = element_text(size = 14),
        panel.border = element_blank(),  
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),  
        axis.line = element_line(color = "grey")) + 
  geom_vline(xintercept = 0, color = "grey") + 
  geom_hline(yintercept = 0, color = "grey") + 
  coord_cartesian(xlim = c(-max(abs(data$Log_Inflation_Rate_Differential)), max(abs(data$Log_Inflation_Rate_Differential))), 
                  ylim = c(-max(abs(data$Change_log_Exchange_Rate)), max(abs(data$Change_log_Exchange_Rate))))  

# Print the plot
print(p1)

# Create a summary table for the model
stargazer(model, title="OLS model for UCIP", align=TRUE, out = "OLS_IFE_summary_table.html")

# Save the plot
ggsave('IFE_Scatter_Plot.png', plot = p1, width=11, height=4, units="in", dpi=300)

# Perform the ADF test on the residuals of the model
adf_test <- adf.test(residuals(model))

# Create a data frame with the results
adf_results <- data.frame(
  Test = "Augmented Dickey-Fuller Test",
  Statistic = adf_test$statistic,
  `Lag Order` = adf_test$parameter,
  `p-value` = adf_test$p.value,
  `Alternative Hypothesis` = adf_test$alternative
)

# Generate the HTML table with stargazer
stargazer(adf_results, title="ADF Test for IFE", type="html", out = "IFE_ADF_test.html", summary = FALSE)
```



```{r}
#| message: false
#| warning: false
#| echo: false
#| output: false
###### Creating Data Frame of Major Economic Indicators (Quarterly) ######

# Load the required package
library(quantmod)

# Get the data
# USA
getSymbols("CCUSMA02HUQ618N", src = "FRED") # Quarterly Exchange rate (HUF/USD)
getSymbols("GDPC1", src = "FRED")           # Quarterly U.S. real GDP
getSymbols("IRLTLT01USQ156N", src = "FRED") # Quarterly U.S. interest rate (10-year Treasury Constant Maturity Rate)
getSymbols("SPASTT01USQ661N", src = "FRED") # Quarterly U.S. share price index
getSymbols("CPALTT01USQ659N", src = "FRED") # U.S. inflation rate (Consumer Price Index for All Urban Consumers: All Items)

# HUN
getSymbols("SPASTT01HUQ661N", src = "FRED") # Quarterly Hungary stock price index
getSymbols("IRLTLT01HUQ156N", src = "FRED") # Quarterly Hungary interest rate
getSymbols("CPALTT01HUQ659N", src = "FRED") # Quarterly Hungary inflation rate
getSymbols("CLVMNACSCAB1GQHU", src = "FRED") # Quarterly Hungary real GDP


# Convert the xts objects to data frames
# USA
exchange_rate_data <- data.frame(Date=index(CCUSMA02HUQ618N), coredata(CCUSMA02HUQ618N))
names(exchange_rate_data) <- c("Date", "Exchange_Rate")
us_gdp_data <- data.frame(Date=index(GDPC1), coredata(GDPC1))
names(us_gdp_data) <- c("Date", "US_Real_GDP")
us_interest_rate_data <- data.frame(Date=index(IRLTLT01USQ156N), coredata(IRLTLT01USQ156N))
names(us_interest_rate_data) <- c("Date", "US_Interest_Rate")
us_stock_price_data <- data.frame(Date=index(SPASTT01USQ661N), coredata(SPASTT01USQ661N))
names(us_stock_price_data) <- c("Date", "US_Stock_Price")
us_inflation_rate_data <- data.frame(Date=index(CPALTT01USQ659N), coredata(CPALTT01USQ659N))
names(us_inflation_rate_data) <- c("Date", "US_Inflation_Rate")

# HUN
hu_stock_price_data <- data.frame(Date=index(SPASTT01HUQ661N), coredata(SPASTT01HUQ661N))
names(hu_stock_price_data) <- c("Date", "HU_Stock_Price")
hu_interest_rate_data <- data.frame(Date=index(IRLTLT01HUQ156N), coredata(IRLTLT01HUQ156N))
names(hu_interest_rate_data) <- c("Date", "HU_Interest_Rate")
hu_inflation_rate_data <- data.frame(Date=index(CPALTT01HUQ659N), coredata(CPALTT01HUQ659N))
names(hu_inflation_rate_data) <- c("Date", "HU_Inflation_Rate")
hu_gdp_data <- data.frame(Date=index(CLVMNACSCAB1GQHU), coredata(CLVMNACSCAB1GQHU))
names(hu_gdp_data) <- c("Date", "HU_Real_GDP")

# Merge the data frames by 'Date'
# US
data <- merge(exchange_rate_data, us_gdp_data, by = "Date")
data <- merge(data, us_interest_rate_data, by = "Date")
data <- merge(data, us_stock_price_data, by = "Date")
data <- merge(data, us_inflation_rate_data, by = "Date")

#HUN
data <- merge(data, hu_stock_price_data, by = "Date")
data <- merge(data, hu_interest_rate_data, by = "Date")
data <- merge(data, hu_inflation_rate_data, by = "Date")
data <- merge(data, hu_gdp_data, by = "Date")

# Convert interest rates and inflation rates to decimal format
data$US_Interest_Rate <- data$US_Interest_Rate / 100
data$US_Inflation_Rate <- data$US_Inflation_Rate / 100
data$HU_Interest_Rate <- data$HU_Interest_Rate / 100
data$HU_Inflation_Rate <- data$HU_Inflation_Rate / 100

# Calculate the expected exchange rate as the arithmetic mean of the previous 4 quarters
data$Expected_Exchange_Rate <- rollapply(data$Exchange_Rate, width = 4, FUN = mean, align = "right", fill = NA)
```



```{r}
#| message: false
#| warning: false
#| echo: false
#| output: false
# Take the log of the variables
library(stargazer)
library(lmtest)
data$log_Exchange_Rate <- log(data$Exchange_Rate)
data$log_US_Real_GDP <- log(data$US_Real_GDP)
data$log_US_Stock_Price <- log(data$US_Stock_Price)
data$log_HU_Stock_Price <- log(data$HU_Stock_Price)
data$log_HU_Real_GDP <- log(data$HU_Real_GDP)
data$log_Expected_Exchange_Rate <- log(data$Expected_Exchange_Rate)

# Calculate the first differences (returns) and add NA to the beginning
data$log_Exchange_Rate_diff <- c(NA, diff(data$log_Exchange_Rate))
data$log_US_Real_GDP_diff <- c(NA, diff(data$log_US_Real_GDP))
data$log_US_Stock_Price_diff <- c(NA, diff(data$log_US_Stock_Price))
data$log_HU_Stock_Price_diff <- c(NA, diff(data$log_HU_Stock_Price))
data$log_HU_Real_GDP_diff <- c(NA, diff(data$log_HU_Real_GDP))
data$log_Expected_Exchange_Rate_diff <- c(NA, diff(data$log_Expected_Exchange_Rate))

# Calculate the differences
data$US_Interest_Rate_diff <- c(NA, diff(data$US_Interest_Rate))
data$US_Inflation_Rate_diff <- c(NA, diff(data$US_Inflation_Rate))
data$HU_Interest_Rate_diff <- c(NA, diff(data$HU_Interest_Rate))
data$HU_Inflation_Rate_diff <- c(NA, diff(data$HU_Inflation_Rate))

# Fit the linear model
fit1 <- lm(log_Exchange_Rate_diff ~ log_US_Real_GDP_diff + US_Interest_Rate_diff + log_US_Stock_Price_diff + US_Inflation_Rate_diff + log_HU_Stock_Price_diff + HU_Interest_Rate_diff + HU_Inflation_Rate_diff + log_HU_Real_GDP_diff + log_Expected_Exchange_Rate_diff, data = data)

stargazer(fit1, title="OLS Supply-Demand Model for Hungarian Currency", align=TRUE, out = "summary_table.html")


dwtest(fit1)

# Perform the Durbin-Watson test
dw_result <- dwtest(fit1)

# Create a data frame with the test statistic and p-value
dw_data <- data.frame(
  Test_Statistic = dw_result$statistic,
  P_Value = dw_result$p.value
)

# Create a summary table with stargazer
stargazer(dw_data, type = "html", out = "dw_summary.html", summary = FALSE)
```



```{r}
#| message: false
#| warning: false
#| echo: false
#| output: false
###### Supply-Demand GARCH DCC ######
# Load the necessary package
library(rmgarch)

# Prepare the data
data_var <- data[, c("log_Exchange_Rate_diff", "log_US_Real_GDP_diff", "US_Interest_Rate_diff", "log_US_Stock_Price_diff", "US_Inflation_Rate_diff", "log_HU_Stock_Price_diff", "HU_Interest_Rate_diff", "HU_Inflation_Rate_diff", "log_HU_Real_GDP_diff", "log_Expected_Exchange_Rate_diff")]
data_var[is.na(data_var)] <- 0

# Specify the univariate GARCH models
uspec <- multispec(replicate(10, ugarchspec(variance.model = list(model = "sGARCH"), mean.model = list(armaOrder = c(0, 0)), distribution.model = "norm")))

# Fit the DCC model
dcc_spec <- dccspec(uspec = uspec, dccOrder = c(1, 1), distribution = "mvnorm")
dcc_fit <- dccfit(dcc_spec, data = data_var)

# Print the model summary
summary(dcc_fit)

# Extract the conditional variances and correlations
dcc_results <- rmgarch::rcov(dcc_fit)

# Get the conditional variances for the first variable
variances <- dcc_results[,1,1]

# Get the conditional correlations between the first variable and all others
correlations <- dcc_results[,,1]

# Print the results
print(variances)
print(correlations)
summary(dcc_fit)

# Extract the conditional correlations from the fitted DCC model
dcc_results <- rmgarch::rcov(dcc_fit)

# Get the conditional correlations between the first variable (log_Exchange_Rate_diff) and all others
correlations <- dcc_results[,,1]

# Create a data frame with the dynamic correlations
correlation_data <- data.frame(
  Variable = colnames(correlations)[-1],  # Exclude the first variable itself
  Correlation_with_log_Exchange_Rate_diff = correlations[1, -1]  # Exclude the first variable itself
)

# Remove the 'Variable' column
correlation_data$Variable <- NULL

# Calculate the standard errors of the correlations for the first variable
# This is a simplification and may not be accurate if the correlations are not normally distributed
standard_error <- sd(correlations[1, -1]) / sqrt(length(correlations[1, -1]))

# Calculate z-values and p-values for each time point
z_values <- correlations[1, -1] / standard_error
p_values <- 2 * (1 - pnorm(abs(z_values)))

# Add the p-values to the correlation data
correlation_data$P_Value <- p_values

# Print the correlation data with p-values
print(correlation_data)

# Round the correlations and p-values to four decimal places
correlation_data$Correlation_with_log_Exchange_Rate_diff <- round(correlation_data$Correlation_with_log_Exchange_Rate_diff, 4)
correlation_data$P_Value <- round(correlation_data$P_Value, 4)

add_stars <- function(p) {
  if (p < 0.001) return("***")
  else if (p < 0.01) return("**")
  else if (p < 0.05) return("*")
  else return("")
}

# Add stars to the correlations
correlation_data$Correlation_with_log_Exchange_Rate_diff <- paste0(correlation_data$Correlation_with_log_Exchange_Rate_diff, 
                                                                   sapply(correlation_data$P_Value, add_stars))

# Create a summary table and save it as an HTML file
stargazer(correlation_data, type = "html", 
          title = "Summary of Correlations and P-values", 
          column.labels = c("Correlation with log_Exchange_Rate_diff", "P-Value"),
          p = list(correlation_data$P_Value),
          star.cutoffs = c(0.05, 0.01, 0.001),
          out = "DCCsummary_table.html",
          summary = FALSE,
          digits =4)
```



```{r}
#| message: false
#| warning: false
#| echo: false
#| output: false
###### Cointegration test for Supply-Demand variables ######
library(urca)

# Perform the Johansen-Procedure
test <- ca.jo(data[, c("log_Exchange_Rate", "log_US_Real_GDP", "US_Interest_Rate", "log_US_Stock_Price", "US_Inflation_Rate", "log_HU_Stock_Price", "HU_Interest_Rate", "HU_Inflation_Rate", "log_HU_Real_GDP", "log_Expected_Exchange_Rate")], type = "trace", ecdet = "trend", K = 2)

# Extract the relevant information
eigenvalues <- test@lambda
test_statistics <- test@teststat
critical_values <- test@cval

# Create data frames
eigenvalues_df <- data.frame(Eigenvalues = eigenvalues)
test_results_df <- data.frame(
  Test_Statistics = test_statistics,
  Critical_Values_10pct = critical_values[, "10pct"],
  Critical_Values_5pct = critical_values[, "5pct"],
  Critical_Values_1pct = critical_values[, "1pct"]
)

# Create tables with stargazer
eigenvalues_table <- stargazer(eigenvalues_df, title="Eigenvalues", type="html", digits=2, out="eigenvalues_Supply_Demand.html")
test_results_table <- stargazer(test_results_df, title="Test Statistics and Critical Values", type="html", digits=2, out="test_results_Supply_Demand.html")
```




